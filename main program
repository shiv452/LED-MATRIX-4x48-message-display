#define max_char 100  
int charIndex;
int scrollspeed = 3; //Set the scroll speed ( lower=faster)
int i;
int x;
int y;
char r_char;

char msg[] =" *** Welcome to my New Project || 2020 ***  ";//Change the text here.
//char msg[] =" 12:50 am ";//Change the text here.



//Columns
int clockPin1 = 6; //Arduino pin connected to Clock Pin 11 of 74HC595
int latchPin1 = 5; //Arduino pin connected to Latch Pin 12 of 74HC595
int dataPin1 = 7;  //Arduino pin connected to Data Pin 14 of 74HC595

//Rows
int clockPin2 = 10; //Arduino pin connected to Clock Pin 11 of 74HC595
int latchPin2 = 9; //Arduino pin connected to Latch Pin 12 of 74HC595
int dataPin2 = 8;  //Arduino pin connected to Data Pin 14 of 74HC595

//BITMAP
//Bits in this array represents one LED of the matrix
// 8 is # of rows, 6 is # of LED matrices
byte bitmap[8][7]; 

int numZones = sizeof(bitmap) / 8; // One Zone refers to one 8 x 8 Matrix ( Group of 8 columns)
int maxZoneIndex = numZones-1;
int numCols = numZones * 8;

//FONT DEFENITION
byte alphabets[][8] = {
 {0,0,0,0,0},//@ as SPACE
 {8,28,54,99,65},//<<
 {31, 36, 68, 36, 31},//A
 {127, 73, 73, 73, 54},//B
 {62, 65, 65, 65, 34},//C
 {127, 65, 65, 34, 28},//D
 {127, 73, 73, 65, 65},//E
 {127, 72, 72, 72, 64},//F
 {62, 65, 65, 69, 38},//G
 {127, 8, 8, 8, 127},//H
 {0, 65, 127, 65, 0},//I
 {2, 1, 1, 1, 126},//J
 {127, 8, 20, 34, 65},//K
 {127, 1, 1, 1, 1},//L
 {127, 32, 16, 32, 127},//M
 {127, 32, 16, 8, 127},//N
 {62, 65, 65, 65, 62},//O
 {127, 72, 72, 72, 48},//P
 {62, 65, 69, 66, 61},//Q
 {127, 72, 76, 74, 49},//R
 {50, 73, 73, 73, 38},//S
 {64, 64, 127, 64, 64},//T
 {126, 1, 1, 1, 126},//U
 {124, 2, 1, 2, 124},//V
 {126, 1, 6, 1, 126},//W
 {99, 20, 8, 20, 99},//X
 {96, 16, 15, 16, 96},//Y
 {67, 69, 73, 81, 97},//Z
};

char alphabets[][8] = {
   {0x00,0x00,0x00,0x00,0x00}, //
   {0x00,0x00,0x7d,0x00,0x00}, // !
   {0x00,0x70,0x00,0x70,0x00}, // "
    {0x14,0x7f,0x14,0x7f,0x14}, // #
    {0x12,0x2a,0x6b,0x2a,0x24}, // $
    {0x32,0x34,0x08,0x16,0x26}, // %
    {0x36,0x49,0x4d,0x52,0x25}, // &
    {0x00,0x00,0x70,0x00,0x00}, // '
    {0x00,0x3e,0x41,0x00,0x00}, // (
    {0x00,0x0,0x41,0x3e,0x00}, // )
    {0x2a,0x1c,0x08,0x1c,0x2a}, // *
    {0x08,0x08,0x3e,0x08,0x08}, // +
    {0x00,0x01,0x06,0x04,0x00}, // ,
    {0x08,0x08,0x08,0x08,0x00}, // -
    {0x00,0x00,0x03,0x03,0x00}, // .
    {0x02,0x04,0x08,0x10,0x20}, // /
    {0x3e,0x41,0x41,0x3e,0x00}, // 0
    {0x11,0x21,0x7f,0x01,0x01}, // 1
    {0x21,0x43,0x45,0x49,0x31}, // 2
    {0x22,0x49,0x49,0x49,0x36}, // 3
    {0x0c,0x14,0x24,0x7f,0x04}, // 4
    {0x72,0x51,0x51,0x51,0x4e}, // 5
    {0x3e,0x49,0x49,0x49,0x26}, // 6
    {0x60,0x40,0x43,0x4c,0x70}, // 7
   {0x36,0x49,0x49,0x49,0x36}, // 8
    {0x32,0x49,0x49,0x49,0x3e}, // 9
   {0x00,0x36,0x36,0x00,0x00}, // :
    {0x01,0x36,0x34,0x00,0x00}, // ;
    {0x08,0x14,0x22,0x41,0x00}, // <
    {0x14,0x14,0x14,0x14,0x00}, // =
    {0x00,0x41,0x22,0x14,0x08}, // >
    {0x30,0x40,0x45,0x48,0x30}, // ?
    {0x3e,0x41,0x59,0x55,0x3c}, // @
    {0x3f,0X44,0x44,0x44,0x3f}, // A
    {0x7f,0x49,0x49,0x49,0x36}, // B
    {0x3e,0x41,0x41,0x41,0x22}, // C
    {0x41,0x7f,0x41,0x41,0x3e}, // D
    {0x7f,0x49,0x49,0x49,0x41}, // E
    {0x7f,0x48,0x48,0x48,0x40}, // F
    {0x3e,0x41,0x45,0x45,0x26}, // G
    {0x7f,0x08,0x08,0x08,0x7f}, // H
    {0x41,0x41,0x7f,0x41,0x41}, // I
    {0x42,0x41,0x41,0x7e,0x40}, // J
    {0x7f,0x08,0x14,0x22,0x41}, // K
    {0x7f,0x01,0x01,0x01,0x01}, // L
    {0x7f,0x20,0x18,0x20,0x7f}, // M
    {0x7f,0x20,0x18,0x06,0x7f}, // N
    {0x3e,0x41,0x41,0x41,0x3e}, // O
    {0x7f,0x48,0x48,0x48,0x30}, // P
    {0x3c,0x42,0x46,0x42,0x3d}, // Q
    {0x7f,0x48,0x4c,0x4a,0x31}, // R
    {0x32,0x49,0x49,0x49,0x26}, // S
    {0x40,0x40,0x7f,0x40,0x40}, // T
    {0x7e,0x01,0x01,0x01,0x7e}, // U
    {0x7c,0x02,0x01,0x02,0x7c}, // V
    {0x7e,0x01,0x06,0x01,0x7e}, // W
    {0x41,0x22,0x1c,0x22,0x41}, // X
    {0x70,0x08,0x0F,0x08,0x70}, // Y
    {0x43,0x45,0x49,0x51,0x61}, // Z
    {0x00,0x7f,0x41,0x00,0x00}, // [
    {0x20,0x10,0x08,0x04,0x02}, // "\"
    {0x00,0x00,0x41,0x7f,0x00}, // ]
    {0x00,0x20,0x40,0x20,0x00}, // ^
    {0x01,0x01,0x01,0x01,0x01}, // _
    {0x00,0x40,0x20,0x00,0x00}, // `
    {0x0c,0x12,0x14,0x0e,0x01}, // a
    {0x7e,0x11,0x11,0x0e,0x00}, // b
    {0x0e,0x11,0x11,0x11,0x00}, // c
    {0x0e,0x11,0x11,0x7e,0x00}, // d
    {0x0e,0x15,0x15,0x0d,0x00}, // e
    {0x08,0x3f,0x48,0x20,0x00}, // f
    {0x12,0x29,0x29,0x1e,0x00}, // g
    {0x7f,0x08,0x08,0x07,0x00}, // h
    {0x00,0x11,0x5f,0x01,0x00}, // i
    {0x00,0x12,0x11,0x5e,0x00}, // j
    {0x7f,0x04,0x0a,0x11,0x00}, // s
    {0x00,0x41,0x7f,0x01,0x00}, // l
    {0x3f,0x10,0x0f,0x10,0x0f}, // m
    {0x20,0x1f,0x10,0x10,0x0f}, // n
    {0x0e,0x11,0x11,0x0e,0x00}, // o
    {0x1f,0x14,0x14,0x08,0x00}, // p
    {0x08,0x14,0x14,0x1f,0x02}, // q
    {0x1f,0x08,0x10,0x00,0x00}, // r
    {0x09,0x15,0x15,0x12,0x00}, // s
    {0x10,0x7e,0x11,0x02,0x00}, // t
    {0x1e,0x01,0x01,0x1e,0x01}, // u
    {0x1e,0x01,0x1e,0x00,0x00}, // v
    {0x1e,0x01,0x06,0x01,0x1e},// w
    {0x11,0x0a,0x04,0x0a,0x11}, // x
    {0x19,0x05,0x06,0x18,0x00}, // y
    {0x13,0x15,0x19,0x11,0x00}, // z
    {0x00,0x08,0x36,0x41,0x00}, // {
    {0x00,0x00,0x7f,0x00,0x00}, // |
    {0x00,0x41,0x36,0x08,0x00}, // }
    {0x08,0x10,0x08,0x10,0x00}, // ~
};


 //Small 8x8 font
 char alphabets[][8] = {
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, {0x00, 0x00, 0x5F, 0x00, 0x00, 0x00, 0x00, 0x00}, {0x00, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00},
  {0x00, 0x14, 0x7F, 0x14, 0x7F, 0x14, 0x00, 0x00}, {0x00, 0x24, 0x2A, 0x7F, 0x2A, 0x12, 0x00, 0x00}, {0x00, 0x23, 0x13, 0x08, 0x64, 0x62, 0x00, 0x00},
 {0x00, 0x36, 0x49, 0x55, 0x22, 0x50, 0x00, 0x00}, {0x00, 0x00, 0x05, 0x03, 0x00, 0x00, 0x00, 0x00}, {0x00, 0x1C, 0x22, 0x41, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x41, 0x22, 0x1C, 0x00, 0x00, 0x00, 0x00}, {0x00, 0x08, 0x2A, 0x1C, 0x2A, 0x08, 0x00, 0x00}, {0x00, 0x08, 0x08, 0x3E, 0x08, 0x08, 0x00, 0x00},
  {0x00, 0xA0, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00}, {0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00}, {0x00, 0x60, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x20, 0x10, 0x08, 0x04, 0x02, 0x00, 0x00}, {0x00, 0x3E, 0x51, 0x49, 0x45, 0x3E, 0x00, 0x00}, {0x00, 0x00, 0x42, 0x7F, 0x40, 0x00, 0x00, 0x00},
  {0x00, 0x62, 0x51, 0x49, 0x49, 0x46, 0x00, 0x00}, {0x00, 0x22, 0x41, 0x49, 0x49, 0x36, 0x00, 0x00}, {0x00, 0x18, 0x14, 0x12, 0x7F, 0x10, 0x00, 0x00},
  {0x00, 0x27, 0x45, 0x45, 0x45, 0x39, 0x00, 0x00}, {0x00, 0x3C, 0x4A, 0x49, 0x49, 0x30, 0x00, 0x00}, {0x00, 0x01, 0x71, 0x09, 0x05, 0x03, 0x00, 0x00},
  {0x00, 0x36, 0x49, 0x49, 0x49, 0x36, 0x00, 0x00}, {0x00, 0x06, 0x49, 0x49, 0x29, 0x1E, 0x00, 0x00}, {0x00, 0x00, 0x36, 0x36, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x00, 0xAC, 0x6C, 0x00, 0x00, 0x00, 0x00}, {0x00, 0x08, 0x14, 0x22, 0x41, 0x00, 0x00, 0x00}, {0x00, 0x14, 0x14, 0x14, 0x14, 0x14, 0x00, 0x00},
  {0x00, 0x41, 0x22, 0x14, 0x08, 0x00, 0x00, 0x00}, {0x00, 0x02, 0x01, 0x51, 0x09, 0x06, 0x00, 0x00}, {0x00, 0x32, 0x49, 0x79, 0x41, 0x3E, 0x00, 0x00},
  {0x00, 0x7E, 0x09, 0x09, 0x09, 0x7E, 0x00, 0x00}, {0x00, 0x7F, 0x49, 0x49, 0x49, 0x36, 0x00, 0x00}, {0x00, 0x3E, 0x41, 0x41, 0x41, 0x22, 0x00, 0x00},
  {0x00, 0x7F, 0x41, 0x41, 0x22, 0x1C, 0x00, 0x00}, {0x00, 0x7F, 0x49, 0x49, 0x49, 0x41, 0x00, 0x00}, {0x00, 0x7F, 0x09, 0x09, 0x09, 0x01, 0x00, 0x00},
  {0x00, 0x3E, 0x41, 0x41, 0x51, 0x72, 0x00, 0x00}, {0x00, 0x7F, 0x08, 0x08, 0x08, 0x7F, 0x00, 0x00}, {0x00, 0x41, 0x7F, 0x41, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x20, 0x40, 0x41, 0x3F, 0x01, 0x00, 0x00}, {0x00, 0x7F, 0x08, 0x14, 0x22, 0x41, 0x00, 0x00}, {0x00, 0x7F, 0x40, 0x40, 0x40, 0x40, 0x00, 0x00},
  {0x00, 0x7F, 0x02, 0x0C, 0x02, 0x7F, 0x00, 0x00}, {0x00, 0x7F, 0x04, 0x08, 0x10, 0x7F, 0x00, 0x00}, {0x00, 0x3E, 0x41, 0x41, 0x41, 0x3E, 0x00, 0x00},
  {0x00, 0x7F, 0x09, 0x09, 0x09, 0x06, 0x00, 0x00}, {0x00, 0x3E, 0x41, 0x51, 0x21, 0x5E, 0x00, 0x00}, {0x00, 0x7F, 0x09, 0x19, 0x29, 0x46, 0x00, 0x00},
  {0x00, 0x26, 0x49, 0x49, 0x49, 0x32, 0x00, 0x00}, {0x00, 0x01, 0x01, 0x7F, 0x01, 0x01, 0x00, 0x00}, {0x00, 0x3F, 0x40, 0x40, 0x40, 0x3F, 0x00, 0x00},
  {0x00, 0x1F, 0x20, 0x40, 0x20, 0x1F, 0x00, 0x00}, {0x00, 0x3F, 0x40, 0x38, 0x40, 0x3F, 0x00, 0x00}, {0x00, 0x63, 0x14, 0x08, 0x14, 0x63, 0x00, 0x00},
  {0x00, 0x03, 0x04, 0x78, 0x04, 0x03, 0x00, 0x00}, {0x00, 0x61, 0x51, 0x49, 0x45, 0x43, 0x00, 0x00}, {0x00, 0x7F, 0x41, 0x41, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x02, 0x04, 0x08, 0x10, 0x20, 0x00, 0x00}, {0x00, 0x41, 0x41, 0x7F, 0x00, 0x00, 0x00, 0x00}, {0x00, 0x04, 0x02, 0x01, 0x02, 0x04, 0x00, 0x00},
  {0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00}, {0x00, 0x01, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00}, {0x00, 0x20, 0x54, 0x54, 0x54, 0x78, 0x00, 0x00},
  {0x00, 0x7F, 0x48, 0x44, 0x44, 0x38, 0x00, 0x00}, {0x00, 0x38, 0x44, 0x44, 0x28, 0x00, 0x00, 0x00}, {0x00, 0x38, 0x44, 0x44, 0x48, 0x7F, 0x00, 0x00},
  {0x00, 0x38, 0x54, 0x54, 0x54, 0x18, 0x00, 0x00}, {0x00, 0x08, 0x7E, 0x09, 0x02, 0x00, 0x00, 0x00}, {0x00, 0x18, 0xA4, 0xA4, 0xA4, 0x7C, 0x00, 0x00},
  {0x00, 0x7F, 0x08, 0x04, 0x04, 0x78, 0x00, 0x00}, {0x00, 0x00, 0x7D, 0x00, 0x00, 0x00, 0x00, 0x00}, {0x00, 0x80, 0x84, 0x7D, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x7F, 0x10, 0x28, 0x44, 0x00, 0x00, 0x00}, {0x00, 0x41, 0x7F, 0x40, 0x00, 0x00, 0x00, 0x00}, {0x00, 0x7C, 0x04, 0x18, 0x04, 0x78, 0x00, 0x00},
  {0x00, 0x7C, 0x08, 0x04, 0x7C, 0x00, 0x00, 0x00}, {0x00, 0x38, 0x44, 0x44, 0x38, 0x00, 0x00, 0x00}, {0x00, 0xFC, 0x24, 0x24, 0x18, 0x00, 0x00, 0x00},
  {0x00, 0x18, 0x24, 0x24, 0xFC, 0x00, 0x00, 0x00}, {0x00, 0x00, 0x7C, 0x08, 0x04, 0x00, 0x00, 0x00}, {0x00, 0x48, 0x54, 0x54, 0x24, 0x00, 0x00, 0x00},
  {0x00, 0x04, 0x7F, 0x44, 0x00, 0x00, 0x00, 0x00}, {0x00, 0x3C, 0x40, 0x40, 0x7C, 0x00, 0x00, 0x00}, {0x00, 0x1C, 0x20, 0x40, 0x20, 0x1C, 0x00, 0x00},
  {0x00, 0x3C, 0x40, 0x30, 0x40, 0x3C, 0x00, 0x00}, {0x00, 0x44, 0x28, 0x10, 0x28, 0x44, 0x00, 0x00}, {0x00, 0x1C, 0xA0, 0xA0, 0x7C, 0x00, 0x00, 0x00},
  {0x00, 0x44, 0x64, 0x54, 0x4C, 0x44, 0x00, 0x00}, {0x00, 0x08, 0x36, 0x41, 0x00, 0x00, 0x00, 0x00}, {0x00, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00},
  {0x00, 0x41, 0x36, 0x08, 0x00, 0x00, 0x00, 0x00}, {0x00, 0x02, 0x01, 0x01, 0x02, 0x01, 0x00, 0x00}, {0x00, 0x02, 0x05, 0x05, 0x02, 0x00, 0x00, 0x00}
}; 

char alphabets[95][8] = {
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},  // SPACE
  {0x00,0x00,0x00,0x4f,0x4f,0x00,0x00,0x00},  // !
  {0x00,0x07,0x07,0x00,0x00,0x07,0x07,0x00},  // "
  {0x14,0x7f,0x7f,0x14,0x14,0x7f,0x7f,0x14},  // #
  {0x00,0x24,0x2e,0x6b,0x6b,0x3a,0x12,0x00},  // $
  {0x00,0x63,0x33,0x18,0x0c,0x66,0x63,0x00},  // %
  {0x00,0x32,0x7f,0x4d,0x4d,0x77,0x72,0x50},  // &
  {0x00,0x00,0x00,0x07,0x07,0x00,0x00,0x00},  // '
  {0x00,0x00,0x1c,0x3e,0x63,0x41,0x00,0x00},  // (
  {0x00,0x00,0x41,0x63,0x3e,0x1c,0x00,0x00},  // )
  {0x08,0x2a,0x3e,0x1c,0x1c,0x3e,0x2a,0x08},  // *
  {0x00,0x08,0x08,0x3e,0x3e,0x08,0x08,0x00},  // +
  {0x00,0x00,0x80,0xe0,0x60,0x00,0x00,0x00},  // ,
  {0x00,0x08,0x08,0x08,0x08,0x08,0x08,0x00},  // -
  {0x00,0x00,0x00,0x60,0x60,0x00,0x00,0x00},  // .
  {0x00,0x40,0x60,0x30,0x18,0x0c,0x06,0x02},  // /
  {0x00,0x3e,0x7f,0x49,0x45,0x7f,0x3e,0x00},  // 0
 {0x00,0x40,0x44,0x7f,0x7f,0x40,0x40,0x00},  // 1
  {0x00,0x62,0x73,0x51,0x49,0x4f,0x46,0x00},  // 2
  {0x00,0x22,0x63,0x49,0x49,0x7f,0x36,0x00},  // 3
  {0x00,0x18,0x18,0x14,0x16,0x7f,0x7f,0x10},  // 4
  {0x00,0x27,0x67,0x45,0x45,0x7d,0x39,0x00},  // 5
 {0x00,0x3e,0x7f,0x49,0x49,0x7b,0x32,0x00},  // 6
  {0x00,0x03,0x03,0x79,0x7d,0x07,0x03,0x00},  // 7
  {0x00,0x36,0x7f,0x49,0x49,0x7f,0x36,0x00},  // 8
  {0x00,0x26,0x6f,0x49,0x49,0x7f,0x3e,0x00},  // 9
  {0x00,0x00,0x00,0x24,0x24,0x00,0x00,0x00},  // :
  {0x00,0x00,0x80,0xe4,0x64,0x00,0x00,0x00},  // ;
  {0x00,0x08,0x1c,0x36,0x63,0x41,0x41,0x00},  // <
  {0x00,0x14,0x14,0x14,0x14,0x14,0x14,0x00},  // =
  {0x00,0x41,0x41,0x63,0x36,0x1c,0x08,0x00},  // >
  {0x00,0x02,0x03,0x51,0x59,0x0f,0x06,0x00},  // ?
  {0x00,0x3e,0x7f,0x41,0x4d,0x4f,0x2e,0x00},  // @
  {0x00,0x7c,0x7e,0x0b,0x0b,0x7e,0x7c,0x00},  // A
  {0x00,0x7f,0x7f,0x49,0x49,0x7f,0x36,0x00},  // B
  {0x00,0x3e,0x7f,0x41,0x41,0x63,0x22,0x00},  // C
  {0x00,0x7f,0x7f,0x41,0x63,0x3e,0x1c,0x00},  // D
  {0x00,0x7f,0x7f,0x49,0x49,0x41,0x41,0x00},  // E
  {0x00,0x7f,0x7f,0x09,0x09,0x01,0x01,0x00},  // F
  {0x00,0x3e,0x7f,0x41,0x49,0x7b,0x3a,0x00},  // G
  {0x00,0x7f,0x7f,0x08,0x08,0x7f,0x7f,0x00},  // H
  {0x00,0x00,0x41,0x7f,0x7f,0x41,0x00,0x00},  // I
  {0x00,0x20,0x60,0x41,0x7f,0x3f,0x01,0x00},  // J
  {0x00,0x7f,0x7f,0x1c,0x36,0x63,0x41,0x00},  // K
  {0x00,0x7f,0x7f,0x40,0x40,0x40,0x40,0x00},  // L
  {0x00,0x7f,0x7f,0x06,0x0c,0x06,0x7f,0x7f},  // M
  {0x00,0x7f,0x7f,0x0e,0x1c,0x7f,0x7f,0x00},  // N
  {0x00,0x3e,0x7f,0x41,0x41,0x7f,0x3e,0x00},  // O
  {0x00,0x7f,0x7f,0x09,0x09,0x0f,0x06,0x00},  // P
  {0x00,0x1e,0x3f,0x21,0x61,0x7f,0x5e,0x00},  // Q
  {0x00,0x7f,0x7f,0x19,0x39,0x6f,0x46,0x00},  // R
  {0x00,0x26,0x6f,0x49,0x49,0x7b,0x32,0x00},  // S
  {0x00,0x01,0x01,0x7f,0x7f,0x01,0x01,0x00},  // T
  {0x00,0x3f,0x7f,0x40,0x40,0x7f,0x3f,0x00},  // U
  {0x00,0x1f,0x3f,0x60,0x60,0x3f,0x1f,0x00},  // V
  {0x00,0x7f,0x7f,0x30,0x18,0x30,0x7f,0x7f},  // W
  {0x00,0x63,0x77,0x1c,0x1c,0x77,0x63,0x00},  // X
  {0x00,0x07,0x0f,0x78,0x78,0x0f,0x07,0x00},  // Y
  {0x00,0x61,0x71,0x59,0x4d,0x47,0x43,0x00},  // Z
  {0x00,0x00,0x7f,0x7f,0x41,0x41,0x00,0x00},  // [
  {0x00,0x02,0x06,0x0c,0x18,0x30,0x60,0x40},  // \
  {0x00,0x00,0x41,0x41,0x7f,0x7f,0x00,0x00},  // ]
  {0x00,0x04,0x06,0x03,0x03,0x06,0x04,0x00},  // ^
  {0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80},  // _
  {0x00,0x00,0x00,0x01,0x03,0x06,0x04,0x00},  // `
  {0x00,0x20,0x74,0x54,0x54,0x7c,0x78,0x00},  // a
  {0x00,0x7e,0x7e,0x48,0x48,0x78,0x30,0x00},  // b
  {0x00,0x38,0x7c,0x44,0x44,0x44,0x00,0x00},  // c
  {0x00,0x30,0x78,0x48,0x48,0x7e,0x7e,0x00},  // d
  {0x00,0x38,0x7c,0x54,0x54,0x5c,0x18,0x00},  // e
  {0x00,0x00,0x08,0x7c,0x7e,0x0a,0x0a,0x00},  // f
  {0x00,0x98,0xbc,0xa4,0xa4,0xfc,0x7c,0x00},  // g
  {0x00,0x7e,0x7e,0x08,0x08,0x78,0x70,0x00},  // h
  {0x00,0x00,0x48,0x7a,0x7a,0x40,0x00,0x00},  // i
  {0x00,0x00,0x80,0x80,0x80,0xfa,0x7a,0x00},  // j
  {0x00,0x7e,0x7e,0x10,0x38,0x68,0x40,0x00},  // k
  {0x00,0x00,0x42,0x7e,0x7e,0x40,0x00,0x00},  // l
  {0x00,0x7c,0x7c,0x18,0x38,0x1c,0x7c,0x78},  // m
  {0x00,0x7c,0x7c,0x04,0x04,0x7c,0x78,0x00},  // n
  {0x00,0x38,0x7c,0x44,0x44,0x7c,0x38,0x00},  // o
  {0x00,0xfc,0xfc,0x24,0x24,0x3c,0x18,0x00},  // p
  {0x00,0x18,0x3c,0x24,0x24,0xfc,0xfc,0x00},  // q
  {0x00,0x7c,0x7c,0x04,0x04,0x0c,0x08,0x00},  // r
  {0x00,0x48,0x5c,0x54,0x54,0x74,0x24,0x00},  // s
  {0x00,0x04,0x04,0x3e,0x7e,0x44,0x44,0x00},  // t
  {0x00,0x3c,0x7c,0x40,0x40,0x7c,0x7c,0x00},  // u
  {0x00,0x1c,0x3c,0x60,0x60,0x3c,0x1c,0x00},  // v
  {0x00,0x1c,0x7c,0x70,0x38,0x70,0x7c,0x1c},  // w
  {0x00,0x44,0x6c,0x38,0x38,0x6c,0x44,0x00},  // x
  {0x00,0x9c,0xbc,0xa0,0xe0,0x7c,0x3c,0x00},  // y
  {0x00,0x44,0x64,0x74,0x5c,0x4c,0x44,0x00},  // z
  {0x00,0x00,0x08,0x3e,0x77,0x41,0x00,0x00},  // {
  {0x00,0x00,0x00,0x7f,0x7f,0x00,0x00,0x00},  // |
  {0x00,0x00,0x41,0x77,0x3e,0x08,0x00,0x00},  // }
  {0x00,0x08,0x04,0x0c,0x18,0x01,0x08,0x00}   // ~
};


char alphabets[][8] = {
static unsigned char font5x7[95][6] PROGMEM= {
{0x00,0x00,0x00,0x00,0x00,0x00}, // SPACE
{0x00,0x00,0x00,0x5F,0x00,0x00}, // ! 
{0x00,0x00,0x07,0x00,0x07,0x00}, // "
{0x00,0x14,0x7F,0x14,0x7F,0x14}, // #
{0x00,0x24,0x2A,0x7F,0x2A,0x12}, // $
{0x00,0x23,0x13,0x08,0x64,0x62}, // %
{0x00,0x36,0x49,0x55,0x22,0x50}, // &
{0x00,0x00,0x05,0x03,0x00,0x00}, // '
{0x00,0x00,0x1C,0x22,0x41,0x00}, // (
{0x00,0x00,0x41,0x22,0x1C,0x00}, // )
{0x00,0x14,0x08,0x3E,0x08,0x14}, // *
{0x0,0x18,0x3c, 0x7c, 0xf8,0x7c, 0x3c, 0x18},  //CORAZON
{0x00,0x08,0x08,0x3E,0x08,0x08}, // +
{0x00,0x00,0x50,0x30,0x00,0x00}, // ,
{0x00,0x08,0x08,0x08,0x08,0x08}, // -
{0x00,0x00,0x60,0x60,0x00,0x00}, // .
{0x00,0x20,0x10,0x08,0x04,0x02}, // /
 
{0x00,0x3E,0x51,0x49,0x45,0x3E}, // 0
{0x00,0x00,0x42,0x7F,0x40,0x00}, // 1
{0x00,0x42,0x61,0x51,0x49,0x46}, // 2
{0x00,0x21,0x41,0x45,0x4B,0x31}, // 3
{0x00,0x18,0x14,0x12,0x7F,0x10}, // 4
{0x00,0x27,0x45,0x45,0x45,0x39}, // 5
{0x00,0x3C,0x4A,0x49,0x49,0x30}, // 6
{0x00,0x01,0x71,0x09,0x05,0x03}, // 7
{0x00,0x36,0x49,0x49,0x49,0x36}, // 8
{0x00,0x06,0x49,0x49,0x29,0x1E}, // 9
 
{0x00,0x36,0x36,0x00,0x00,0x00}, // :
{0x00,0x56,0x36,0x00,0x00,0x00}, // ;
{0x00,0x08,0x14,0x22,0x41,0x00}, // <
{0x00,0x14,0x14,0x14,0x14,0x14}, // =
{0x00,0x00,0x41,0x22,0x14,0x08}, // >
{0x00,0x02,0x01,0x51,0x09,0x06}, // ?
{0x00,0x30,0x49,0x79,0x41,0x3E}, // @
 
{0x00,0x7E,0x11,0x11,0x11,0x7E}, // A
{0x00,0x7F,0x49,0x49,0x49,0x36}, // B
{0x00,0x3E,0x41,0x41,0x41,0x22}, // C
{0x00,0x7F,0x41,0x41,0x22,0x1C}, // D
{0x00,0x7F,0x49,0x49,0x49,0x41}, // E 
{0x00,0x7F,0x09,0x09,0x09,0x01}, // F
{0x00,0x3E,0x41,0x49,0x49,0x7A}, // G
{0x00,0x7F,0x08,0x08,0x08,0x7F}, // H
{0x00,0x00,0x41,0x7F,0x41,0x00}, // I
{0x00,0x20,0x40,0x41,0x3F,0x01}, // J
{0x00,0x7F,0x08,0x14,0x22,0x41}, // K
{0x00,0x7F,0x40,0x40,0x40,0x40}, // L
{0x00,0x7F,0x02,0x0C,0x02,0x7F}, // M
{0x00,0x7F,0x04,0x08,0x10,0x7F}, // N
{0x00,0x3E,0x41,0x41,0x41,0x3E}, // O
{0x00,0x7F,0x09,0x09,0x09,0x06}, // P
{0x00,0x3E,0x41,0x51,0x21,0x5E}, // Q
{0x00,0x7F,0x09,0x19,0x29,0x46}, // R
{0x00,0x46,0x49,0x49,0x49,0x31}, // S
{0x00,0x01,0x01,0x7F,0x01,0x01}, // T
{0x00,0x3F,0x40,0x40,0x40,0x3F}, // U
{0x00,0x1F,0x20,0x40,0x20,0x1F}, // V
{0x00,0x3F,0x40,0x30,0x40,0x3F}, // W
{0x00,0x63,0x14,0x08,0x14,0x63}, // X
{0x00,0x07,0x08,0x70,0x08,0x07}, // Y
{0x00,0x61,0x51,0x49,0x45,0x43}, // Z
 {0x00,0x00,0x7F,0x41,0x41,0x00}, // [
{0x00,0x02,0x04,0x08,0x10,0x20}, // backslash
{0x00,0x00,0x41,0x41,0x7F,0x00}, // ]
{0x00,0x04,0x02,0x01,0x02,0x04}, // ^
{0x00,0x40,0x40,0x40,0x40,0x40}, // _
{0x00,0x00,0x01,0x02,0x04,0x00}, // `
 
{0x00,0x20,0x54,0x54,0x54,0x78}, // a
{0x00,0x7F,0x50,0x48,0x48,0x30}, // b
{0x00,0x38,0x44,0x44,0x44,0x28}, // c
{0x00,0x38,0x44,0x44,0x48,0x7F}, // d
{0x00,0x38,0x54,0x54,0x54,0x18}, // e
{0x00,0x08,0x7E,0x09,0x01,0x02}, // f
{0x00,0x0C,0x52,0x52,0x52,0x3E}, // g
{0x00,0x7F,0x08,0x04,0x04,0x78}, // h
{0x00,0x00,0x44,0x7D,0x40,0x00}, // i
{0x00,0x20,0x40,0x44,0x3D,0x00}, // j
{0x00,0x7F,0x10,0x28,0x44,0x00}, // k
{0x00,0x00,0x41,0x7F,0x40,0x00}, // l
{0x00,0x78,0x04,0x18,0x04,0x78}, // m
{0x00,0x7C,0x08,0x04,0x04,0x78}, // n
{0x00,0x38,0x44,0x44,0x44,0x38}, // o
{0x00,0x7C,0x14,0x14,0x14,0x08}, // p
{0x00,0x08,0x14,0x14,0x18,0xFC}, // q
{0x00,0x7C,0x08,0x04,0x04,0x08}, // r
{0x00,0x48,0x54,0x54,0x54,0x20}, // s
{0x00,0x04,0x3F,0x44,0x40,0x20}, // t
{0x00,0x3C,0x40,0x40,0x20,0x7C}, // u
{0x00,0x1C,0x20,0x40,0x20,0x1C}, // v
{0x00,0x3C,0x40,0x30,0x40,0x3C}, // w
{0x00,0x44,0x28,0x10,0x28,0x44}, // x
{0x00,0x0C,0x50,0x50,0x50,0x3C}, // y
{0x00,0x44,0x64,0x54,0x4C,0x44}, // z
{0x00,0x00,0x08,0x36,0x41,0x00}, // {
};


void clearBitmap()
{
 //Clear bitmap
 for (int row = 0; row < 8; row++) {
   for (int zone = 0; zone <= maxZoneIndex; zone++) {
     bitmap[row][zone] = 0; 
   }
 }  
}

void setup() {
 pinMode(latchPin1, OUTPUT);
 pinMode(clockPin1, OUTPUT);
 pinMode(dataPin1, OUTPUT);

 pinMode(latchPin2, OUTPUT);
 pinMode(clockPin2, OUTPUT);
 pinMode(dataPin2, OUTPUT);
 Serial.begin(9600);
 
 clearBitmap();

}

//FUNCTIONS
// Displays bitmap array in the matrix
void RefreshDisplay()
{
 for (int row = 0; row < 8; row++) {
   int rowbit = 1 << row;
   digitalWrite(latchPin2, LOW);//Hold latchPin LOW for transmitting data
   shiftOut(dataPin2, clockPin2, LSBFIRST, rowbit);   //Transmit data

   //Start sending column bytes
   digitalWrite(latchPin1, LOW);//Hold latchPin LOW for transmitting data

   //Shift out to each matrix
   for (int zone = maxZoneIndex; zone >= 0; zone--) 
   {
     shiftOut(dataPin1, clockPin1, MSBFIRST, bitmap[row][zone]);
   }

   //flip both latches at once to eliminate flicker
   digitalWrite(latchPin1, HIGH);//Return the latch pin 1 high to signal chip
   digitalWrite(latchPin2, HIGH);//Return the latch pin 2 high to signal chip

   //Wait
   delayMicroseconds(300);
 }
}

// Converts row and colum to bitmap bit and turn it off/on
void Plot(int col, int row, bool isOn)
{
 int zone = col / 8;
 int colBitIndex = x % 8;
 byte colBit = 1 << colBitIndex;
 if (isOn)
   bitmap[row][zone] =  bitmap[y][zone] | colBit;
 else
   bitmap[row][zone] =  bitmap[y][zone] & (~colBit);
}

// Plot each character of the message one column at a time, updated the display, shift bitmap left.
void XProcess()
{

 for (charIndex=0; charIndex <(sizeof(msg)-1); charIndex++)
 {
   int alphabetIndex = msg[charIndex] - ' ';                                      // I changed '@' to ' ' to display the different alphabets
   if (alphabetIndex < 0) alphabetIndex=0;
   
   //Draw one character of the message
   // Each character is 5 columns wide, loop two more times to create 2 pixel space betwen characters
   for (int col = 0; col < 8; col++)
   {
     for (int row = 0; row < 8; row++)
     {
       // Set the pixel to what the alphabet say for columns 0 thru 4, but always leave columns 5 and 6 blank.
       bool isOn = 0; 
       if (col<8) isOn = bitRead( alphabets[alphabetIndex][col], 7-row ) == 1;
       Plot( numCols-1, row, isOn); //Draw on the rightmost column, the shift loop below will scroll it leftward.
     }
     for (int refreshCount=0; refreshCount < scrollspeed; refreshCount++)
       RefreshDisplay();
     //Shift the bitmap one column to left
     for (int row=0; row<8; row++)
     {
       for (int zone=0; zone < numZones; zone++)
       {
         //This right shift would show as a left scroll on display because leftmost column is represented by least significant bit of the byte.
         bitmap[row][zone] = bitmap[row][zone] >> 1;
         // Shift over lowest bit from the next zone as highest bit of this zone.
         if (zone < maxZoneIndex) bitWrite(bitmap[row][zone], 7, bitRead(bitmap[row][zone+1],0));
       }
     }
   }
 } 
}

void serialInput(){
   //check if serial is avaible an before reading a new message delete's the old message
   if(Serial.available()){       
        for(i=0; i<105; i++){
         msg[i] = '\0';
        } 
        //resests the index        
        charIndex=0;
    }
    //while is reading the message 
    while(Serial.available()){
       //the message can have up to 100 characters 
       if(charIndex < (max_char-1)) 
       {         
           r_char = Serial.read();      // Reads a character
           msg[charIndex] = r_char;     // Stores the character in message array
           charIndex++;                     // Increment position
           msg[charIndex] = '\0';       // Delete the last position
       }
   }  
}
void loop() {
 XProcess();
 serialInput();
}
